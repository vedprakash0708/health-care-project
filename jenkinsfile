pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "vedantabharat/medicure-service:${BUILD_NUMBER}"
        KUBE_CONTEXT = "minikube"
        BUILD_TIMEOUT = "15" // Minutes
        NODE_PORT = "30080" // Matches deployment file
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src']
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/vedprakash0708/health-care-project.git'
                    ]]
                ])
                dir('src') {
                    sh 'ls -la' // Verify files
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('src') {
                    timeout(time: "${env.BUILD_TIMEOUT}", unit: 'MINUTES') {
                        sh './mvnw clean package -DskipTests'
                        sh 'ls -l target/*.jar || { echo "‚ùå JAR file not found"; exit 1; }'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir('src') {
                    sh './mvnw test'
                    junit 'target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'target/surefire-reports/*.xml', allowEmptyArchive: true
                }
            }
        }

        stage('Docker Operations') {
            steps {
                dir('src') {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                        docker build -t ${DOCKER_IMAGE} .
                        echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
                        docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Prepare Minikube') {
            steps {
                script {
                    // Clean up previous cluster
                    sh 'minikube delete || true'
                    
                    // Start fresh cluster with more resources
                    sh """
                    minikube start \
                        --driver=docker \
                        --memory=4000 \
                        --cpus=2 \
                        --extra-config=apiserver.enable-admission-plugins="" \
                        --ports=${NODE_PORT}:${NODE_PORT}
                    minikube addons enable metrics-server
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('src') {
                    script {
                        // Update and apply deployment
                        sh """
                        sed -i "s|image:.*|image: ${DOCKER_IMAGE}|" medicure-deployment-v3.yaml
                        kubectl apply -f medicure-deployment-v3.yaml --validate=false
                        """
                        
                        // Verify deployment
                        timeout(time: 5, unit: 'MINUTES') {
                            sh """
                            kubectl rollout status deployment/medicure-deployment --timeout=300s
                            kubectl get pods -o wide
                            """
                        }
                        
                        // Get access details
                        def NODE_IP = sh(script: "minikube ip", returnStdout: true).trim()
                        echo "üåê Application Health Check: curl http://${NODE_IP}:${NODE_PORT}/actuator/health"
                        echo "üìä Prometheus Metrics: curl http://${NODE_IP}:${NODE_PORT}/actuator/prometheus"
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    def NODE_IP = sh(script: "minikube ip", returnStdout: true).trim()
                    
                    // Retry logic for health check
                    def retryCount = 0
                    def maxRetries = 5
                    def success = false
                    
                    while (retryCount < maxRetries && !success) {
                        try {
                            sh "curl -sSf http://${NODE_IP}:${NODE_PORT}/actuator/health"
                            success = true
                            echo "‚úÖ Health check passed"
                        } catch (Exception e) {
                            retryCount++
                            echo "‚ö†Ô∏è Attempt ${retryCount}/${maxRetries} failed. Retrying in 10 seconds..."
                            sleep(10)
                        }
                    }
                    
                    if (!success) {
                        sh """
                        echo "‚ùå Health check failed after ${maxRetries} attempts"
                        kubectl describe pods -l app=medicure
                        kubectl logs -l app=medicure --tail=100
                        """
                        error("Smoke test failed")
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive important files
            dir('src') {
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                junit 'target/surefire-reports/*.xml'
            }
            
            // Clean up workspace
            cleanWs()
            
            // Send notification
            script {
                def subject = "${currentBuild.currentResult}: Job ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                def details = """
                Build: ${env.BUILD_URL}
                Docker Image: ${DOCKER_IMAGE}
                ${currentBuild.currentResult == 'SUCCESS' ? '‚úÖ Deployment successful' : '‚ùå Deployment failed'}
                """
                
                emailext(
                    subject: subject,
                    body: details,
                    to: 'devops@example.com',
                    attachLog: true
                )
            }
        }
    }
}
