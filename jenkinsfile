pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "vedantabharat/medicure-service:${BUILD_NUMBER}"
        KUBE_CONTEXT = "minikube"
        BUILD_TIMEOUT = "15" // Minutes
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/vedprakash0708/health-care-project.git']]
                ])
            }
        }
        
        stage('Build & Test') {
            steps {
                timeout(time: "${env.BUILD_TIMEOUT}", unit: 'MINUTES') {
                    parallel(
                        "Build": {
                            steps {
                                sh 'mvn clean package -DskipTests'
                                sh 'ls -l target/*.jar || { echo "❌ JAR file not found"; exit 1; }'
                            }
                        },
                        "Test": {
                            steps {
                                sh 'mvn test'
                                junit 'target/surefire-reports/*.xml'
                                archiveArtifacts artifacts: 'target/surefire-reports/*.xml', allowEmptyArchive: true
                            }
                        }
                    )
                }
            }
        }

        stage('Docker Operations') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    script {
                        sh """
                        docker build -t ${DOCKER_IMAGE} .
                        docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Kubernetes Deployment') {
            steps {
                script {
                    // Ensure Minikube is running
                    def minikubeStatus = sh(script: 'minikube status || true', returnStatus: true)
                    if (minikubeStatus != 0) {
                        sh 'minikube start --memory=4000 --cpus=2 --driver=docker'
                    }

                    // Update deployment with new image
                    sh """
                    kubectl config use-context ${KUBE_CONTEXT}
                    sed -i "s|image:.*|image: ${DOCKER_IMAGE}|" k8s-deployment.yaml
                    kubectl apply -f k8s-deployment.yaml --validate=false
                    """

                    // Verify deployment
                    timeout(time: 5, unit: 'MINUTES') {
                        sh """
                        kubectl rollout status deployment/medicure-deployment --timeout=120s
                        kubectl get pods -o wide
                        """
                    }

                    // Get service URL
                    def SERVICE_URL = sh(script: 'minikube service medicure-service --url', returnStdout: true).trim()
                    echo "🌐 Service available at: ${SERVICE_URL}"
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    def SERVICE_URL = sh(script: 'minikube service medicure-service --url', returnStdout: true).trim()
                    sh """
                    curl -sSf ${SERVICE_URL}/actuator/health || { 
                        echo "❌ Health check failed"; 
                        kubectl logs -l app=medicure --tail=50;
                        exit 1; 
                    }
                    """
                }
            }
        }
    }

    post {
        always {
            // Cleanup and artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            junit 'target/surefire-reports/*.xml'
            cleanWs()
            
            // Final status
            script {
                def BUILD_STATUS = currentBuild.currentResult
                if (BUILD_STATUS == 'SUCCESS') {
                    slackSend(color: 'good', message: "✅ Build #${BUILD_NUMBER} succeeded!")
                } else {
                    slackSend(color: 'danger', message: "❌ Build #${BUILD_NUMBER} failed!")
                    // Save debug info
                    sh '''
                    kubectl describe pods -l app=medicure > pod-description.log
                    kubectl logs -l app=medicure --tail=100 > pod-logs.log
                    '''
                    archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                }
            }
        }
    }
}
