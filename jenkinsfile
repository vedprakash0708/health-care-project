pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "vedantabharat/medicure-service:${BUILD_NUMBER}"
        KUBE_CONTEXT = "minikube"
        BUILD_TIMEOUT = "15" // Minutes
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/vedprakash0708/health-care-project.git']]
                ])
            }
        }
        
        stage('Build') {
            steps {
                timeout(time: "${env.BUILD_TIMEOUT}", unit: 'MINUTES') {
                    sh 'mvn clean package -DskipTests'
                    sh 'ls -l target/*.jar || { echo "❌ JAR file not found"; exit 1; }'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
                junit 'target/surefire-reports/*.xml'
                archiveArtifacts artifacts: 'target/surefire-reports/*.xml', allowEmptyArchive: true
            }
        }

        stage('Docker Operations') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                    docker build -t ${DOCKER_IMAGE} .
                    docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Prepare Minikube') {
            steps {
                script {
                    // Fix Minikube certificate issues
                    sh '''
                    minikube delete || true
                    rm -rf ~/.minikube ~/.kube
                    minikube start --memory=4000 --cpus=2 --driver=docker
                    minikube update-context
                    '''
                }
            }
        }

        stage('Kubernetes Deployment') {
            steps {
                script {
                    // Wait for cluster to be ready
                    sh 'kubectl wait --for=condition=Ready nodes --all --timeout=120s'
                    
                    // Update deployment with new image
                    sh """
                    kubectl config use-context ${KUBE_CONTEXT}
                    sed -i "s|image:.*|image: ${DOCKER_IMAGE}|" k8s-deployment.yaml
                    kubectl apply -f k8s-deployment.yaml --validate=false
                    """

                    // Verify deployment
                    timeout(time: 5, unit: 'MINUTES') {
                        sh """
                        kubectl rollout status deployment/medicure-deployment --timeout=300s
                        kubectl get pods -o wide
                        """
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    def SERVICE_URL = sh(script: 'minikube service medicure-service --url', returnStdout: true).trim()
                    sh """
                    curl -sSf ${SERVICE_URL}/actuator/health || { 
                        echo "❌ Health check failed"; 
                        kubectl logs -l app=medicure --tail=50;
                        exit 1; 
                    }
                    """
                }
            }
        }
    }

    post {
        always {
            // Cleanup and artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            junit 'target/surefire-reports/*.xml'
            cleanWs()
            
            // Final status notification (email instead of slack)
            emailext (
                subject: "Build ${currentBuild.currentResult}: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                body: """
                Check console output at ${env.BUILD_URL}
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to: 'devops@example.com'
            )
        }
    }
}
